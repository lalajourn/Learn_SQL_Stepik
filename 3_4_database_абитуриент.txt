1. Создать вспомогательную таблицу applicant,  куда включить id образовательной программы, id абитуриента, сумму баллов абитуриентов (столбец itog) в отсортированном сначала по id образовательной программы, а потом по убыванию суммы баллов виде (использовать запрос из предыдущего урока).

Ответ:

CREATE TABLE applicant AS
SELECT program_id, enrollee_subject.enrollee_id, SUM(result) AS itog 
FROM enrollee
    INNER JOIN program_enrollee USING (enrollee_id)
    INNER JOIN program USING (program_id)
    INNER JOIN program_subject USING (program_id)
    INNER JOIN subject USING (subject_id)
    INNER JOIN enrollee_subject ON subject.subject_id = enrollee_subject.subject_id AND enrollee_subject.enrollee_id = enrollee.enrollee_id
GROUP BY 1, 2
ORDER BY 1, 3 DESC;

SELECT * FROM applicant;

*****

2. Из таблицы applicant, созданной на предыдущем шаге, удалить записи, если абитуриент на выбранную образовательную программу не набрал минимального балла хотя бы по одному предмету (использовать запрос из предыдущего урока).

Ответ:

DELETE FROM applicant
USING applicant
    INNER JOIN program_subject USING (program_id)
    INNER JOIN subject USING (subject_id)
    INNER JOIN enrollee_subject USING (subject_id,enrollee_id)
WHERE result < min_result;

SELECT * FROM applicant;

*****

3. Повысить итоговые баллы абитуриентов в таблице applicant на значения дополнительных баллов (использовать запрос из предыдущего урока).

Ответ:

UPDATE applicant
    INNER JOIN (
        SELECT enrollee_id, IF(SUM(achievement_id) IS NULL, 0, SUM(bonus)) AS points
        FROM enrollee
            LEFT JOIN enrollee_achievement USING(enrollee_id)
            LEFT JOIN achievement USING(achievement_id)
        GROUP BY enrollee_id
        ) AS bonus USING (enrollee_id)
SET itog = itog + points;

SELECT * FROM applicant;

*****

4. Поскольку при добавлении дополнительных баллов, абитуриенты по каждой образовательной программе могут следовать не в порядке убывания суммарных баллов, необходимо создать новую таблицу applicant_order на основе таблицы applicant. При создании таблицы данные нужно отсортировать сначала по id образовательной программы, потом по убыванию итогового балла. А таблицу applicant, которая была создана как вспомогательная, необходимо удалить.

Ответ:

CREATE TABLE applicant_order AS
SELECT program_id, enrollee_id, itog
FROM applicant
ORDER BY 1 ASC, 3 DESC; 

DROP TABLE applicant;

SELECT * FROM applicant_order;

*****

5. Включить в таблицу applicant_order новый столбец str_id целого типа , расположить его перед первым.

Ответ:

ALTER TABLE applicant_order ADD str_id INT FIRST;

SELECT * FROM applicant_order;

*****

6. Занести в столбец str_id таблицы applicant_order нумерацию абитуриентов, которая начинается с 1 для каждой образовательной программы.

Ответ:

SET @num_1 := 0;
SET @num_2 := 1;

UPDATE applicant_order
SET str_id = IF(program_id = @num_1, @num_2 := @num_2 + 1, @num_2 := 1 AND @num_1 := @num_1 + 1);

SELECT* FROM applicant_order;

*****

