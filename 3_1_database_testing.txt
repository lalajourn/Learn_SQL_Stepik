1. Вывести студентов, которые сдавали дисциплину «Основы баз данных», указать дату попытки и результат. Информацию вывести по убыванию результатов тестирования.

Ответ: 

SELECT name_student, date_attempt, result
FROM student
    INNER JOIN attempt USING(student_id)
    INNER JOIN subject USING(subject_id)
WHERE attempt.subject_id = 2
ORDER BY result DESC;

*****

2. Вывести, сколько попыток сделали студенты по каждой дисциплине, а также средний результат попыток, который округлить до 2 знаков после запятой. Под результатом попытки понимается процент правильных ответов на вопросы теста, который занесен в столбец result.  В результат включить название дисциплины, а также вычисляемые столбцы Количество и Среднее. Информацию вывести по убыванию средних результатов.

Ответ: 

SELECT name_subject,
COUNT(attempt.subject_id) AS Количество,
ROUND(AVG(result), 2) AS Среднее
FROM subject
     LEFT JOIN attempt USING(subject_id)
GROUP BY name_subject
ORDER BY 3 DESC;

*****

3. Вывести студентов (различных студентов), имеющих максимальные результаты попыток. Информацию отсортировать в алфавитном порядке по фамилии студента.

Максимальный результат не обязательно будет 100%, поэтому явно это значение в запросе не задавать.

Ответ: 

SELECT name_student, result
FROM student
    INNER JOIN attempt USING(student_id)
WHERE result = (
    SELECT MAX(result)
    FROM attempt
    )
ORDER BY name_student;

*****

4. Если студент совершал несколько попыток по одной и той же дисциплине, то вывести разницу в днях между первой и последней попыткой. В результат включить фамилию и имя студента, название дисциплины и вычисляемый столбец Интервал. Информацию вывести по возрастанию разницы. Студентов, сделавших одну попытку по дисциплине, не учитывать. 

Ответ:

SELECT name_student, name_subject,
DATEDIFF(MAX(date_attempt), MIN(date_attempt)) AS Интервал
FROM student
    INNER JOIN attempt USING(student_id)
    INNER JOIN subject USING(subject_id)
GROUP BY name_student, name_subject
HAVING COUNT(date_attempt) > 1
ORDER BY 3;

*****

5. Студенты могут тестироваться по одной или нескольким дисциплинам (не обязательно по всем). Вывести дисциплину и количество уникальных студентов (столбец назвать Количество), которые по ней проходили тестирование . Информацию отсортировать сначала по убыванию количества, а потом по названию дисциплины. В результат включить и дисциплины, тестирование по которым студенты еще не проходили, в этом случае указать количество студентов 0.

Ответ:

SELECT name_subject,
COUNT(DISTINCT(attempt.student_id)) AS Количество
FROM subject
    LEFT JOIN attempt USING(subject_id)
GROUP BY name_subject
HAVING COUNT(DISTINCT(attempt.student_id)) <= 2
ORDER BY 2 DESC, 1 ASC;

*****

6. Случайным образом отберите 3 вопроса по дисциплине «Основы баз данных». В результат включите столбцы question_id и name_question.

Ответ:

SELECT question_id, name_question
FROM question
    INNER JOIN subject USING(subject_id)
WHERE question.subject_id = 2
ORDER BY RAND()
LIMIT 3;

*****

7. Вывести вопросы, которые были включены в тест для Семенова Ивана по дисциплине «Основы SQL» 2020-05-17  (значение attempt_id для этой попытки равно 7). Указать, какой ответ дал студент и правильный он или нет (вывести Верно или Неверно). В результат включить вопрос, ответ и вычисляемый столбец  Результат.

Ответ:

SELECT name_question, name_answer,
IF(is_correct = 1, 'Верно', 'Неверно') AS Результат
FROM question
    INNER JOIN testing USING(question_id)
    INNER JOIN answer USING(answer_id)
WHERE attempt_id = 7;

*****

8. Посчитать результаты тестирования. Результат попытки вычислить как количество правильных ответов, деленное на 3 (количество вопросов в каждой попытке) и умноженное на 100. Результат округлить до двух знаков после запятой. Вывести фамилию студента, название предмета, дату и результат. Последний столбец назвать Результат. Информацию отсортировать сначала по фамилии студента, потом по убыванию даты попытки.

Ответ:

SELECT name_student, name_subject, date_attempt,
ROUND(SUM(is_correct / 3 * 100), 2)  AS Результат
FROM attempt
    INNER JOIN student USING(student_id)
    INNER JOIN testing USING(attempt_id)
    INNER JOIN subject USING(subject_id)
    INNER JOIN answer USING(answer_id)
GROUP BY name_student, name_subject, date_attempt
ORDER BY name_student ASC, date_attempt DESC;

*****

9. Для каждого вопроса вывести процент успешных решений, то есть отношение количества верных ответов к общему количеству ответов, значение округлить до 2-х знаков после запятой. Также вывести название предмета, к которому относится вопрос, и общее количество ответов на этот вопрос. В результат включить название дисциплины, вопросы по ней (столбец назвать Вопрос), а также два вычисляемых столбца Всего_ответов и Успешность. Информацию отсортировать сначала по названию дисциплины, потом по убыванию успешности, а потом по тексту вопроса в алфавитном порядке.

Поскольку тексты вопросов могут быть длинными, обрезать их 30 символов и добавить многоточие "...".

Ответ:

SELECT name_subject,
CONCAT(LEFT(name_question, 30), '...') AS Вопрос,
COUNT(testing.answer_id) AS Всего_ответов,
ROUND((SUM(is_correct) / COUNT(testing.answer_id) * 100), 2) AS Успешность
FROM subject
       INNER JOIN question USING(subject_id)
       INNER JOIN testing USING(question_id)
       LEFT JOIN answer USING(answer_id)
GROUP BY name_subject, Вопрос
ORDER BY name_subject ASC, Успешность DESC, Вопрос ASC;

*****

10. Вывести максимальную оценку студента по каждому предмету, а также вердикт Зачет/Незачет (если результат не менее 70%, то зачет). Если студент не сдавал предмет, оценка по нему будет 0. Результат отсортировать по имени студента и названию предмета.

Ответ:

SELECT name_student, name_subject,
IF(result IS NULL, 0, result) AS Оценка,
IF(result > 70, 'Зачёт', 'Незачёт') AS Результат
FROM student 
     CROSS JOIN subject
     LEFT JOIN attempt USING(student_id, subject_id)
ORDER BY 1, 2;
